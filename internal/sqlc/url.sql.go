// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: url.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url, shortened_code, user_id, expire_time)
VALUES ($1, $2, $3, $4)
RETURNING id, original_url, shortened_code, user_id, expire_time
`

type CreateURLParams struct {
	OriginalUrl   string
	ShortenedCode string
	UserID        *uuid.UUID
	ExpireTime    *time.Time
}

type CreateURLRow struct {
	ID            uuid.UUID
	OriginalUrl   string
	ShortenedCode string
	UserID        *uuid.UUID
	ExpireTime    *time.Time
}

// Create a new shortened URL for a specific user
func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (CreateURLRow, error) {
	row := q.db.QueryRow(ctx, createURL,
		arg.OriginalUrl,
		arg.ShortenedCode,
		arg.UserID,
		arg.ExpireTime,
	)
	var i CreateURLRow
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortenedCode,
		&i.UserID,
		&i.ExpireTime,
	)
	return i, err
}

const deleteURLByID = `-- name: DeleteURLByID :exec
UPDATE urls
SET deleted_at = NOW(), is_deleted = True, is_active = False
WHERE id = $1
`

// Delete URL by url ID
func (q *Queries) DeleteURLByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteURLByID, id)
	return err
}

const getURLByCode = `-- name: GetURLByCode :one
SELECT original_url
FROM urls
WHERE shortened_code = $1
`

// Get the original URL by shortened code
func (q *Queries) GetURLByCode(ctx context.Context, shortenedCode string) (string, error) {
	row := q.db.QueryRow(ctx, getURLByCode, shortenedCode)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}

const getURLsByUserID = `-- name: GetURLsByUserID :many
SELECT id, original_url, shortened_code, user_id, expire_time, is_deleted, is_active, created_at, updated_at, deleted_at
FROM urls
WHERE user_id = $1
`

// Get all URLs created by a specific user
func (q *Queries) GetURLsByUserID(ctx context.Context, userID *uuid.UUID) ([]Url, error) {
	rows, err := q.db.Query(ctx, getURLsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.ShortenedCode,
			&i.UserID,
			&i.ExpireTime,
			&i.IsDeleted,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
