// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: url.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url, shortened_code, user_id)
VALUES ($1, $2, $3)
RETURNING id, original_url, shortened_code, user_id, created_at
`

type CreateURLParams struct {
	OriginalUrl   string
	ShortenedCode string
	UserID        uuid.UUID
}

// Create a new shortened URL for a specific user
func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRow(ctx, createURL, arg.OriginalUrl, arg.ShortenedCode, arg.UserID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortenedCode,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getURLByCode = `-- name: GetURLByCode :one
SELECT id, original_url, shortened_code, user_id, created_at
FROM urls
WHERE shortened_code = $1
`

// Get the original URL by shortened code
func (q *Queries) GetURLByCode(ctx context.Context, shortenedCode string) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByCode, shortenedCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortenedCode,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getURLsByUserID = `-- name: GetURLsByUserID :many
SELECT id, original_url, shortened_code, user_id, created_at
FROM urls
WHERE user_id = $1
`

// Get all URLs created by a specific user
func (q *Queries) GetURLsByUserID(ctx context.Context, userID uuid.UUID) ([]Url, error) {
	rows, err := q.db.Query(ctx, getURLsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.ShortenedCode,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
