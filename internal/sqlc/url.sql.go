// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: url.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url, shortened_code, user_id, expire_time)
VALUES ($1, $2, $3, $4)
RETURNING id, original_url, shortened_code, user_id, expire_time
`

type CreateURLParams struct {
	OriginalUrl   string
	ShortenedCode string
	UserID        *uuid.UUID
	ExpireTime    *time.Time
}

type CreateURLRow struct {
	ID            uuid.UUID
	OriginalUrl   string
	ShortenedCode string
	UserID        *uuid.UUID
	ExpireTime    *time.Time
}

// Create a new shortened URL for a specific user
func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (CreateURLRow, error) {
	row := q.db.QueryRow(ctx, createURL,
		arg.OriginalUrl,
		arg.ShortenedCode,
		arg.UserID,
		arg.ExpireTime,
	)
	var i CreateURLRow
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortenedCode,
		&i.UserID,
		&i.ExpireTime,
	)
	return i, err
}

const getIDByShortCode = `-- name: GetIDByShortCode :one
SELECT id
FROM urls
where shortened_code = $1
`

// Get url ID by short code
func (q *Queries) GetIDByShortCode(ctx context.Context, shortenedCode string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getIDByShortCode, shortenedCode)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getURLByCode = `-- name: GetURLByCode :one
SELECT original_url
FROM urls
WHERE shortened_code = $1
`

// Get the original URL by shortened code
func (q *Queries) GetURLByCode(ctx context.Context, shortenedCode string) (string, error) {
	row := q.db.QueryRow(ctx, getURLByCode, shortenedCode)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}
