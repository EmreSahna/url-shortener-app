// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: url.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url, shortened_code, user_id, ip_address)
VALUES ($1, $2, $3, $4)
RETURNING id, original_url, shortened_code, user_id, ip_address
`

type CreateURLParams struct {
	OriginalUrl   string
	ShortenedCode string
	UserID        *uuid.UUID
	IpAddress     *string
}

type CreateURLRow struct {
	ID            uuid.UUID
	OriginalUrl   string
	ShortenedCode string
	UserID        *uuid.UUID
	IpAddress     *string
}

// Create a new shortened URL for a specific user
func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (CreateURLRow, error) {
	row := q.db.QueryRow(ctx, createURL,
		arg.OriginalUrl,
		arg.ShortenedCode,
		arg.UserID,
		arg.IpAddress,
	)
	var i CreateURLRow
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortenedCode,
		&i.UserID,
		&i.IpAddress,
	)
	return i, err
}

const deleteExpiredUrlByShortCode = `-- name: DeleteExpiredUrlByShortCode :exec
UPDATE urls
SET is_deleted = true, is_active = false, deleted_at = $1
WHERE shortened_code = $2
`

type DeleteExpiredUrlByShortCodeParams struct {
	DeletedAt     *time.Time
	ShortenedCode string
}

// Delete expired url by short code
func (q *Queries) DeleteExpiredUrlByShortCode(ctx context.Context, arg DeleteExpiredUrlByShortCodeParams) error {
	_, err := q.db.Exec(ctx, deleteExpiredUrlByShortCode, arg.DeletedAt, arg.ShortenedCode)
	return err
}

const getIDByShortCode = `-- name: GetIDByShortCode :one
SELECT id
FROM urls
where shortened_code = $1
`

// Get url ID by short code
func (q *Queries) GetIDByShortCode(ctx context.Context, shortenedCode string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getIDByShortCode, shortenedCode)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getURLByCode = `-- name: GetURLByCode :one
SELECT original_url
FROM urls
WHERE shortened_code = $1 and is_active = True and is_deleted = False
`

// Get the original URL by shortened code
func (q *Queries) GetURLByCode(ctx context.Context, shortenedCode string) (string, error) {
	row := q.db.QueryRow(ctx, getURLByCode, shortenedCode)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}

const getURLByID = `-- name: GetURLByID :one
SELECT shortened_code
FROM urls
WHERE id = $1
`

// Get the original URL by url ID
func (q *Queries) GetURLByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getURLByID, id)
	var shortened_code string
	err := row.Scan(&shortened_code)
	return shortened_code, err
}

const getUrlsByUser = `-- name: GetUrlsByUser :many
SELECT urls.id, urls.original_url, urls.shortened_code, urls.is_active, urls.is_deleted, click_counts.total_clicks FROM urls
JOIN click_counts ON click_counts.url_id = urls.id
WHERE (user_id = $1 or ip_address = $2) and is_deleted = False
`

type GetUrlsByUserParams struct {
	UserID    *uuid.UUID
	IpAddress *string
}

type GetUrlsByUserRow struct {
	ID            uuid.UUID
	OriginalUrl   string
	ShortenedCode string
	IsActive      *bool
	IsDeleted     *bool
	TotalClicks   int64
}

// Get Urls by User ID or IpAddr
func (q *Queries) GetUrlsByUser(ctx context.Context, arg GetUrlsByUserParams) ([]GetUrlsByUserRow, error) {
	rows, err := q.db.Query(ctx, getUrlsByUser, arg.UserID, arg.IpAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUrlsByUserRow
	for rows.Next() {
		var i GetUrlsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.OriginalUrl,
			&i.ShortenedCode,
			&i.IsActive,
			&i.IsDeleted,
			&i.TotalClicks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
