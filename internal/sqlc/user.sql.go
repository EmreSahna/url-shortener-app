// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password)
VALUES ($1, $2)
RETURNING id, username, password, is_deleted, is_active, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username string
	Password string
}

// Insert a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsDeleted,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT id, username, password, is_deleted, is_active, created_at, updated_at, deleted_at FROM users
WHERE id = $1
`

// Get user by user id
func (q *Queries) GetUserByUserID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUserID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsDeleted,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, is_deleted, is_active, created_at, updated_at, deleted_at FROM users
WHERE username = $1
`

// Get user by username
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsDeleted,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(
    SELECT 1
    FROM users
    WHERE username = $1
) AS exists
`

// Check username already taken
func (q *Queries) UserExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
